{
  "name": "coc-go",
  "version": "0.10.0",
  "description": "gopls extension for coc",
  "author": "Josa Gesell <josa@gesell.me>",
  "license": "MIT",
  "main": "lib/extension.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/josa42/coc-go.git"
  },
  "engines": {
    "coc": "^0.0.73",
    "node": ">=10"
  },
  "keywords": [
    "coc.nvim",
    "languageserver",
    "gopls",
    "go",
    "golang",
    "vim",
    "neovim"
  ],
  "scripts": {
    "test": "mocha --require ts-node/register '**/*.test.ts'",
    "test:watch": "mocha --watch --watch-files '**/*.ts' --require ts-node/register '**/*.test.ts'",
    "clean": "rimraf lib",
    "build": "tsc -p tsconfig.json",
    "build:watch": "tsc --watch -p tsconfig.json",
    "prepare": "yarn clean && yarn build",
    "link:add": "node ./scripts/link.js add",
    "link:remove": "node ./scripts/link.js remove",
    "update": "yarn run update:snippets && yarn run update:options && yarn run update:readme && yarn run update:readme",
    "update:snippets": "./scripts/update-snippets.js",
    "update:options": "./scripts/update-options.sh && node ./scripts/update-options-interface.js",
    "update:commands": "./scripts/update-commands.js",
    "update:readme": "./scripts/update-tables.sh",
    "lint": "eslint . --ext .ts,.js"
  },
  "activationEvents": [
    "onLanguage:go",
    "onCommand:go.install.gomodifytags",
    "onCommand:go.install.goplay",
    "onCommand:go.install.gopls",
    "onCommand:go.install.gotests",
    "onCommand:go.install.impl",
    "onCommand:go.version"
  ],
  "contributes": {
    "rootPatterns": [
      {
        "filetype": "go",
        "patterns": [
          "go.mod",
          "glide.yaml"
        ]
      }
    ],
    "configuration": {
      "type": "object",
      "title": "gols",
      "properties": {
        "go.enable": {
          "type": "boolean",
          "default": true,
          "description": "Enable Go extension"
        },
        "go.trace.server": {
          "type": "string",
          "default": "off",
          "enum": [
            "off",
            "messages",
            "verbose"
          ],
          "description": "Trace level of gopls"
        },
        "go.goplsPath": {
          "type": "string",
          "description": "Path to `gopls` bin (Change requires `:CocRestart`)"
        },
        "go.goplsArgs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Arguments passed to `gopls` (Change requires `:CocRestart`)"
        },
        "go.goplsEnv": {
          "type": "object",
          "patternProperties": {
            "^.+$": {
              "type": "string"
            }
          },
          "description": "ENV passed to `gopls` (Change requires `:CocRestart`)"
        },
        "go.disable": {
          "type": "object",
          "description": "Disable gopls features",
          "default": {},
          "properties": {
            "workspaceFolders": {
              "type": "boolean",
              "default": false,
              "description": "Disable workspaceFolders feature (Change requires `:CocRestart`)"
            },
            "diagnostics": {
              "type": "boolean",
              "default": false,
              "description": "Disable handle diagnostics (Change requires `:CocRestart`)"
            },
            "completion": {
              "type": "boolean",
              "default": false,
              "description": "Disable completion feature (Change requires `:CocRestart`)"
            }
          }
        },
        "go.goplsOptions": {
          "type": "object",
          "description": "See `gopls` documentation: https://github.com/golang/tools/blob/master/gopls/doc/settings.md",
          "properties": {
            "buildFlags": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "This is the set of flags passed on to the build system when invoked."
            },
            "env": {
              "type": "object",
              "patternProperties": {
                ".+": {
                  "type": "string"
                }
              },
              "description": "This can be used to add environment variables."
            },
            "hoverKind": {
              "type": "string",
              "default": "SynopsisDocumentation",
              "enum": [
                "NoDocumentation",
                "SynopsisDocumentation",
                "FullDocumentation"
              ],
              "description": "This controls the information that appears in the hover text."
            },
            "usePlaceholders": {
              "type": "boolean",
              "default": false,
              "description": "If true, then completion responses may contain placeholders for function parameters or struct fields."
            },
            "linkTarget": {
              "type": "string",
              "default": "pkg.go.dev",
              "enum": [
                "godoc.org",
                "pkg.go.dev"
              ],
              "description": "This controls where points documentation for given package in `textDocument/documentLink`."
            },
            "local": {
              "type": "string",
              "default": "",
              "description": "This is the equivalent of the `goimports -local` flag, which puts imports beginning with this string after 3rd-party packages."
            },
            "expandWorkspaceToModule": {
              "type": "boolean",
              "default": true,
              "description": "This is true if `gopls` should expand the scope of the workspace to include the modules containing the workspace folders."
            },
            "analyses": {
              "type": "object",
              "description": "[EXPERIMENTAL] Analyses specify analyses that the user would like to enable or disable.",
              "additionalProperties": false,
              "properties": {
                "asmdecl": {
                  "type": "boolean",
                  "default": true
                },
                "assign": {
                  "type": "boolean",
                  "default": true
                },
                "atomic": {
                  "type": "boolean",
                  "default": true
                },
                "atomicalign": {
                  "type": "boolean",
                  "default": true
                },
                "bools": {
                  "type": "boolean",
                  "default": true
                },
                "buildtag": {
                  "type": "boolean",
                  "default": true
                },
                "cgocall": {
                  "type": "boolean",
                  "default": true
                },
                "composites": {
                  "type": "boolean",
                  "default": true
                },
                "copylock": {
                  "type": "boolean",
                  "default": true
                },
                "errorsas": {
                  "type": "boolean",
                  "default": true
                },
                "httpresponse": {
                  "type": "boolean",
                  "default": true
                },
                "loopclosure": {
                  "type": "boolean",
                  "default": true
                },
                "lostcancel": {
                  "type": "boolean",
                  "default": true
                },
                "nilfunc": {
                  "type": "boolean",
                  "default": true
                },
                "printf": {
                  "type": "boolean",
                  "default": true
                },
                "shift": {
                  "type": "boolean",
                  "default": true
                },
                "stdmethods": {
                  "type": "boolean",
                  "default": true
                },
                "structtag": {
                  "type": "boolean",
                  "default": true
                },
                "tests": {
                  "type": "boolean",
                  "default": true
                },
                "unmarshal": {
                  "type": "boolean",
                  "default": true
                },
                "unreachable": {
                  "type": "boolean",
                  "default": true
                },
                "unsafeptr": {
                  "type": "boolean",
                  "default": true
                },
                "unusedresult": {
                  "type": "boolean",
                  "default": true
                },
                "deepequalerrors": {
                  "type": "boolean",
                  "default": true
                },
                "fillreturns": {
                  "type": "boolean",
                  "default": false
                },
                "nonewvars": {
                  "type": "boolean",
                  "default": false
                },
                "noresultvalues": {
                  "type": "boolean",
                  "default": true
                },
                "simplifycompositelit": {
                  "type": "boolean",
                  "default": true
                },
                "simplifyrange": {
                  "type": "boolean",
                  "default": true
                },
                "simplifyslice": {
                  "type": "boolean",
                  "default": true
                },
                "sortslice": {
                  "type": "boolean",
                  "default": true
                },
                "testinggoroutine": {
                  "type": "boolean",
                  "default": true
                },
                "undeclaredname": {
                  "type": "boolean",
                  "default": false
                },
                "unusedparams": {
                  "type": "boolean",
                  "default": false
                }
              }
            },
            "codelens": {
              "type": "object",
              "description": "[EXPERIMENTAL] Overrides the enabled/disabled state of various code lenses.",
              "additionalProperties": false,
              "properties": {
                "generate": {
                  "type": "boolean",
                  "default": true
                },
                "upgrade.dependency": {
                  "type": "boolean",
                  "default": true
                },
                "test": {
                  "type": "boolean",
                  "default": false
                },
                "gc_details": {
                  "type": "boolean",
                  "default": false
                }
              }
            },
            "completionDocumentation": {
              "type": "boolean",
              "default": true,
              "description": "[EXPERIMENTAL] If false, indicates that the user does not want documentation with completion results."
            },
            "completeUnimported": {
              "type": "boolean",
              "default": false,
              "description": "[EXPERIMENTAL] If true, the completion engine is allowed to make suggestions for packages that you do not currently import."
            },
            "deepCompletion": {
              "type": "boolean",
              "default": true,
              "description": "[EXPERIMENTAL] If true, this turns on the ability to return completions from deep inside relevant entities, rather than just the locally accessible ones."
            },
            "fuzzyMatching": {
              "type": "boolean",
              "default": true,
              "description": "[EXPERIMENTAL] If true, this enables server side fuzzy matching of completion candidates."
            },
            "matcher": {
              "type": "string",
              "default": "caseInsensitive",
              "enum": [
                "fuzzy",
                "caseSensitive",
                "caseInsensitive"
              ],
              "description": "[EXPERIMENTAL] "
            },
            "annotations": {
              "type": "object",
              "description": "[EXPERIMENTAL]",
              "additionalProperties": false,
              "properties": {
                "noBounds": {
                  "type": "boolean",
                  "default": false
                },
                "noEscape": {
                  "type": "boolean",
                  "default": false
                },
                "noInline": {
                  "type": "boolean",
                  "default": false
                },
                "noNilcheck": {
                  "type": "boolean",
                  "default": false
                }
              }
            },
            "staticcheck": {
              "type": "boolean",
              "description": "[EXPERIMENTAL] If true, it enables the use of the staticcheck."
            },
            "symbolMatcher": {
              "type": "string",
              "default": "caseInsensitive",
              "enum": [
                "fuzzy",
                "caseSensitive",
                "caseInsensitive"
              ],
              "description": "[EXPERIMENTAL] "
            }
          }
        },
        "go.tags": {
          "type": "object",
          "properties": {
            "tags": {
              "type": "string",
              "default": "json",
              "description": "Comma separated tags to be used by `go.tags.add` command"
            },
            "options": {
              "type": "string",
              "default": "json=omitempty",
              "description": "Comma separated tag=options pairs to be used by `go.tags.add` command"
            },
            "transform": {
              "type": "string",
              "enum": [
                "snakecase",
                "camelcase"
              ],
              "default": "snakecase",
              "description": "Transformation rule used by `go.tags.add` command to add tags"
            },
            "skipUnexported": {
              "type": "boolean",
              "default": false,
              "description": "If true, skip unexported fields"
            }
          }
        },
        "go.tests": {
          "type": "object",
          "properties": {
            "generateFlags": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [],
              "description": "Additional command line flags to pass to `gotests` for generating tests."
            }
          }
        },
        "go.checkForUpdates": {
          "description": "[EXPERIMENTAL] Check for gopls updates on start.",
          "type": "string",
          "default": "disabled",
          "enum": [
            "disabled",
            "inform",
            "ask",
            "install"
          ]
        }
      }
    },
    "commands": [
      {
        "title": "Generate interface stubs",
        "category": "Go",
        "command": "go.impl.cursor"
      },
      {
        "title": "Install / update gomodifytags",
        "category": "Go",
        "command": "go.install.gomodifytags"
      },
      {
        "title": "Install / update goplay",
        "category": "Go",
        "command": "go.install.goplay"
      },
      {
        "title": "Install / update gopls",
        "category": "Go",
        "command": "go.install.gopls"
      },
      {
        "title": "Install / update gotests",
        "category": "Go",
        "command": "go.install.gotests"
      },
      {
        "title": "Install / update impl",
        "category": "Go",
        "command": "go.install.impl"
      },
      {
        "title": "Run on go playground",
        "category": "Go",
        "command": "go.playground"
      },
      {
        "title": "Add tags to struct fields",
        "category": "Go",
        "command": "go.tags.add"
      },
      {
        "title": "Add tags to struct field in current line",
        "category": "Go",
        "command": "go.tags.add.line"
      },
      {
        "title": "Add tags to struct fields (prompt)",
        "category": "Go",
        "command": "go.tags.add.prompt"
      },
      {
        "title": "Remove all tags from struct fields",
        "category": "Go",
        "command": "go.tags.clear"
      },
      {
        "title": "Remove all tags from struct fields in current line",
        "category": "Go",
        "command": "go.tags.clear.line"
      },
      {
        "title": "Remove tags from struct fields",
        "category": "Go",
        "command": "go.tags.remove"
      },
      {
        "title": "Remove tags from struct field in current line",
        "category": "Go",
        "command": "go.tags.remove.line"
      },
      {
        "title": "Remove tags from struct fields (prompt)",
        "category": "Go",
        "command": "go.tags.remove.prompt"
      },
      {
        "title": "Generate unit tests for exported functions in file",
        "category": "Go",
        "command": "go.test.generate.exported"
      },
      {
        "title": "Generate unit tests for file",
        "category": "Go",
        "command": "go.test.generate.file"
      },
      {
        "title": "Toggle test file",
        "category": "Go",
        "command": "go.test.toggle"
      },
      {
        "title": "Print extension version",
        "category": "Go",
        "command": "go.version"
      }
    ],
    "snippets": [
      {
        "language": "go",
        "path": "./snippets/go.json"
      },
      {
        "language": "gomod",
        "path": "./snippets/gomod.json"
      }
    ]
  },
  "devDependencies": {
    "@types/mocha": "^8.0.0",
    "@types/node": "^14.0.5",
    "@types/node-fetch": "^2.5.7",
    "@types/tmp": "^0.2.0",
    "@types/which": "^1.3.2",
    "@typescript-eslint/eslint-plugin": "^3.0.0",
    "@typescript-eslint/parser": "^3.0.0",
    "coc.nvim": "0.0.77",
    "eslint": "^7.1.0",
    "eslint-config-josa-typescript": "^0.1.2",
    "mocha": "^8.0.1",
    "rimraf": "^3.0.2",
    "tmp": "^0.2.1",
    "ts-node": "^8.10.1",
    "typescript": "~3.9.3"
  },
  "dependencies": {
    "node-fetch": "^2.6.0",
    "tslib": "^2.0.0",
    "which": "^2.0.2"
  }
}
